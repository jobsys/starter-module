<?php

namespace App\Http\Controllers\Manager;

use App\Http\Controllers\BaseManagerController;
use App\Models\Department;
use App\Models\User;
use App\Services\UserService;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Modules\Permission\Entities\Role;
use Modules\Starter\Emnus\State;

class UserController extends BaseManagerController
{
    public function pageUser()
    {
        $departments = Department::all()->map(function ($item) {
            $item->{'value'} = $item->id;
            $item->{'title'} = $item->name;
            return $item;
        });
        $departments = land_classify($departments);
        $roles = Role::orderBy('sort_order', 'DESC')->where('is_active', true)->get();

        return Inertia::render('PageUser', compact('departments', 'roles'));
    }

    public function items(Request $request)
    {
        $name = $request->input('name', false);
        $phone = $request->input('phone', false);
        $work_num = $request->input('work_num', false);
        $email = $request->input('email', false);
        $department_id = $request->input('department_id', false);
        $role_id = $request->input('role_id', false);

        $super_admin_name = config('conf.super_admin_name', false);

        $query = User::authorise()->with(['departments:id,name', 'roles:id,display_name'])
            ->when($name, function ($query, $name) {
                $query->where('name', 'like', "%{$name}%");
            })->when($work_num, function ($query, $work_num) {
                $query->where('work_num', $work_num);
            })->when($phone, function ($query, $phone) {
                $query->where('phone', $phone);
            })->when($email, function ($query, $email) {
                $query->where('email', $email);
            })->when($super_admin_name, function ($query, $super_admin_name) {
                $query->where('name', '<>', $super_admin_name);
            })->orderByDesc('created_at');

        if ($department_id) {
            if ($department_id == -1) {
                $query->doesntHave('departments');
            } else {
                $query->whereHas('departments', function ($query) use ($department_id) {
                    $query->where('id', $department_id);
                });
            }
        };

        if ($role_id) {
            if ($role_id == -1) {
                $query->doesntHave('roles');
            } else {
                $query->whereHas('roles', function ($query) use ($role_id) {
                    $query->where('id', $role_id);
                });
            }
        };

        $pagination = $query->paginate();


        log_access('查看用户列表');

        return $this->json($pagination);
    }

    public function item(Request $request, $id)
    {

        $super_admin_name = config('conf.super_admin_name', false);

        $item = User::authorise()->with(['roles:id,display_name', 'departments:id,name'])->where('id', $id)->when($super_admin_name, function ($query, $super_admin_name) {
            $query->where('name', '<>', $super_admin_name);
        })->first();

        if (!$item) {
            return $this->json(null, State::NOT_FOUND);
        }

        log_access('查看用户详情');

        return $this->json($item);
    }

    public function edit(Request $request, UserService $userService)
    {
        list($input, $error) = land_form_validate(
            $request->only(['id', 'name', 'nickname', 'work_num', 'avatar', 'phone', 'roles', 'departments', 'email', 'password']),
            [
                'name' => 'bail|required|string',
                'phone' => 'bail|required|string',
            ],
            ['name' => '用户名', 'phone' => '手机号码', 'departments' => '所属部门', 'roles' => '用户角色'],
        );

        if ($error) {
            return $this->message($error);
        }

        $roles = $input['roles'] ?? [];
        unset($input['roles']);
        $departments = $input['departments'] ?? [];
        unset($input['departments']);


        list($result, $error) = $userService->editUser($input, $roles, $departments);

        if ($error) {
            return $this->message($error);
        }

        log_access(isset($input['id']) && $input['id'] ? '编辑用户' : '新建用户', $result->id);

        return $this->json($error, $result ? State::SUCCESS : State::FAIL);

    }

    public function delete(Request $request)
    {

        list($input, $error) = land_form_validate(
            $request->only(['id']),
            [
                'id' => 'bail|required|numeric'
            ],
        );

        if ($error) {
            return $this->message($error);
        }

        $item = User::authorise()->where('id', $input['id'])->first();

        if (!$item) {
            return $this->json(null, State::NOT_FOUND);
        }

        $result = $item->delete();

        log_access('删除用户', $item->id);

        return $this->json(null, $result ? State::SUCCESS : State::FAIL);
    }

    public function department(Request $request)
    {
        list($input, $error) = land_form_validate(
            $request->only(['user_ids', 'department_ids', 'mode']),
            [
                'user_ids' => 'bail|required|array',
                'department_ids' => 'bail|required|array',
                'mode' => 'bail|required|string'
            ],
            ['user_ids' => '用户', 'department_ids' => '分配部门', 'mode' => '分配方式'],
        );

        if ($error) {
            return $this->message($error);
        }

        $user_ids = $input['user_ids'];

        $department_ids = $input['department_ids'];

        $users = User::authorise()->whereIn('id', $user_ids)->get(['id']);

        foreach ($users as $user) {

            if ($input['mode'] === 'append') {
                $user->departments()->attach($department_ids);
            } else if ($input['mode'] === 'overwrite') {
                $user->departments()->sync($department_ids);
            }
        }

        return $this->json();


    }

}

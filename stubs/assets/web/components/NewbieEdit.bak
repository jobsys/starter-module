<template>
    <component ref="editorRef" :is="root"></component>
</template>

<script>
export const RERENDER = "rerender"
</script>

<script setup>
import {computed, h as createElement, nextTick, reactive, ref, useSlots, watch} from "vue"
import {
    Button,
    Card,
    Cascader,
    CheckboxGroup,
    Col,
    DatePicker,
    Divider,
    Form,
    Input,
    InputNumber,
    Modal,
    RadioGroup,
    RangePicker,
    Row,
    Select,
    Skeleton,
    Spin,
    Switch,
    Tag,
    Timeline,
    TimePicker,
    TimeRangePicker,
    Tooltip,
    TreeSelect,
} from "ant-design-vue"
import {cloneDeep, isArray, isFunction, isString, isUndefined} from "lodash-es"
import {formLabel, useFormFail, useProcessStatusSuccess} from "@/js/hooks/web/form"
import {getFullCode, getOptionsValue} from "@/js/utils"
import {useFetch} from "@/js/hooks/web/network"
import {useCreateDateFromFormat, useDateFormat} from "@/js/hooks/web/datetime"
import {useModalConfirm} from "@/js/hooks/web/interact"
import NewbieIcon from "./NewbieIcon.vue"
import NewbieUploader from "./NewbieUploader.vue"
import NewbieAddress from "./NewbieAddress.vue"
import NewbieEditor from "./NewbieEditor.vue"

const props = defineProps({
    title: {
        //页面标题
        type: String,
        default: "",
    },
    layout: {
        //页面布局方式，有normal和fixed
        type: String,
        default: "normal",
    },
    data: {
        //本地数据
        type: [Object, String],
    },
    fetchData: {
        //获取详情数据
        type: Object,
    },
    fetchUrl: {
        //获取详情URL
        type: String,
        default: "",
    },
    submitUrl: {
        //提交数据URL
        type: String,
        default: "",
    },
    submitButtonText: {
        //提交按钮文字
        type: String,
        default: "",
    },
    submitConfirmText: {
        //提交确认文字
        type: String,
        default: "",
    },
    closeButtonText: {
        //关闭按钮文字
        type: String,
        default: "",
    },
    disabled: {
        type: Boolean,
        default: false
    },
    submitDisabled: {
        //隐藏提交按钮
        type: Boolean,
        default: false,
    },
    onSuccess: {
        //提交成功后的回调
        type: Function,
    },
    onClose: {
        //关闭页面的按钮
        type: Function,
    },
    form: {
        //数据
        type: Array,
        default() {
            return [
                {
                    key: "", //数据库关联名称
                    title: "", // 显示的名字
                    type: "", //类型,默认是input
                    position: "", //位置，有left(column是two才生效),right(column是two才生效),divider,fixed(layout为fixed才生效) 四种
                    placeholder: "", //组件里的提示
                    tips: "", //form item里的提示
                    style: "", //样式
                    required: "", //是否必填
                    disabled: "", // 组件不可编辑状态
                    onChange: "", //组件变化时的回调
                    defaultProps: "", //组件的配置
                    defaultValue: "", //默认值，默认是空字符串
                },
            ]
        },
    },
    column: {
        // 可选参数 one, two
        type: String,
        default: "one",
    },
    columnWidth: {
        // 在column为two时生效，实为col的分栏。
        type: String,
        default: "12,12",
    },
    autoLoad: {
        //自动加载数据,在fetchData里找
        type: [Boolean, Array, String],
        default: true,
    },
    fullWidth: {
        //占满屏
        type: Boolean,
        default: false,
    },
    size: {
        //card的格式
        type: String,
        default: "small",
    },
    cardWrapper: {
        //用card来包裹
        type: Boolean,
        default: true,
    },
    processReturnData: {
        type: Function,
    },
    processSubmitData: {
        // return false会阻止提交操作
        type: Function,
    },
    formConfig: {
        //form的配置
        type: Object,
        default() {
            return {}
        },
    },
    reverseButton: {
        type: Boolean,
        default: false,
    }
})

const slots = useSlots()

const emits = defineEmits(["afterSuccess"])

let editorRef = ref(null)
let root = ref(null)
let richEditors = {}

const state = reactive({
    temporary: {}, // 用于存放一些临时数据
    buttonLoading: {
        loading: false,
    },
    isInit: true,
    isInitForm: false, //控制初始渲染
    rules: {},
    submitForm: {},
})

const formData = computed(() => props.form)

watch(() => props.data, (newV) => {
    initForm(newV || '')
})

const doInit = () => {
    console.log('doInit')
    if (props.autoLoad && props.fetchUrl) {
        let loadData = props.autoLoad
        let isLoad = true
        //如果是true，则检查fetchData，要全部有值才能发起请求
        if (loadData === true) {
            let key
            for (key in props.fetchData) {
                if (!props.fetchData[key]) {
                    isLoad = false
                }
            }
        } else {
            //不然就按需检查
            if (isString(loadData)) {
                loadData = [loadData]
            }
            loadData.forEach((item) => {
                if (!props.fetchData[item]) {
                    isLoad = false
                }
            })
        }

        //要加载数据
        if (isLoad) {
            fetchItem()
            return
        }
    }

    state.isInit = false
    initForm(props.data || "")
}

const fetchItem = () => {
    state.isInit = true
    if (props.fetchUrl) {
        useFetch().get(props.fetchUrl, {params: props.fetchData}).then(res => {
            state.isInit = false
            useProcessStatusSuccess(res, () => {
                nextTick(() => {
                    initForm(res.result)
                })
            })
        })

    }
}

const initForm = result => {
    console.log('initForm')
    let value, json = {}
    let res = result ? cloneDeep(result) : ""
    state.isInitForm = true
    state.buttonLoading.loading = false
    formData.value.forEach((item) => {
        value = ""
        if (res && !isUndefined(res[item.key])) {
            value = res[item.key]
            delete res[item.key]
        } else if (!isUndefined(item.defaultValue)) {
            value = isFunction(item.defaultValue) ? item.defaultValue(state.submitForm) : item.defaultValue
        }
        if (item.type === "switch") {
            value = value === "true" || value === 1 || value === "1" || value === true
        } else if (item.type === "select") {
            if (item.defaultProps && (item.defaultProps.mode === "multiple" || item.defaultProps.mode === "tags")) {
                value = value || []
            }
        } else if (item.type === "tree-select") {
            if (item.defaultProps && (item.defaultProps.multiple === true || item.defaultProps.treeCheckable === true)) {
                value = value || []
            }
        } else if (item.type === "date" || item.type === "time") {
            if (item.defaultProps && item.defaultProps.type === "range") {
                value = value ? [useCreateDateFromFormat(value[0]), useCreateDateFromFormat(value[1])] : []
            } else {
                value = value ? useCreateDateFromFormat(value) : ""
            }
        } else if (item.type === "checkbox" || item.type === "tag") {
            value = value || []
        } else if (item.type === "address") {
            value = value || []
            if (!isArray(value)) {
                value = getFullCode(value)
            }
        } else if (item.type === "uploader") {
            if (item.defaultProps && item.defaultProps.maxNum && item.defaultProps.maxNum > 1) {
                value = value || []
            } else {
                value = value || {path: "", url: ""}
            }
        } else if (item.type === "editor") {
            setTimeout((value) => {
                    if (richEditors["richEditor_" + item.key]) {
                        richEditors["richEditor_" + item.key].component.exposed.setContent(value)
                    }
                },
                0,
                value
            )
        }
        json[item.key] = value
    })
    if (res) {
        json = Object.assign(json, res)
    }
    if (props.processReturnData) {
        json = props.processReturnData(json, result)
    }
    state.submitForm = json

    nextTick(() => {
        root.value = render()
    })
}

const getColumnCol = (isHalf) => {
    let type = props.column === "two" && !isHalf ? "Part" : "Full"
    return {
        labelCol: formLabel["commonLabel" + type + "Col"],
        wrapperCol: formLabel["commonWrapper" + type + "Col"],
    }
}

const submit = () => {
    editorRef.value.validate()
        .then(async () => {
            let form = cloneDeep(state.submitForm)
            formData.value.forEach((item) => {
                switch (item.type) {
                    case "date":
                        if (form[item.key]) {
                            form[item.key] = useDateFormat(form[item.key], 'YYYY-MM-DD')
                        }
                        break
                    case "time":
                        if (form[item.key]) {
                            form[item.key] = useDateFormat(form[item.key], 'HH:mm:ss')
                        }
                        break
                    case "datetime":
                        if (form[item.key]) {
                            form[item.key] = useDateFormat(form[item.key], 'YYY-MM-DD HH:mm:ss')
                        }
                        break
                    case "address":
                        if (isArray(form[item.key])) {
                            form[item.key] = form[item.key].length ? form[item.key][form[item.key].length - 1] : ""
                        }
                        break
                }
            })
            if (props.processSubmitData) {
                form = props.processSubmitData({processedForm: form, rawForm: state.submitForm})
                if (form === false) {
                    return
                }
            }
            let res = await useFetch(state.buttonLoading).post(props.submitUrl, form)
            if (props.onSuccess) {
                props.onSuccess(res)
            } else {
                useProcessStatusSuccess(res, () => {
                    Modal.success({
                        content: '保存成功',
                        onOk: () => {
                            emits("afterSuccess", res)
                        }
                    })
                })
            }
        })
        .catch((info) => {
            useFormFail(info)
        })
}

const render = () => {

    const _createFormItem = (item, labelWidth, isHalf) => {
        console.log(`_createFormItem ${item.key}`)
        if (item.type === 'slot' && slots[item.key]) {
            return slots[item.key]({submitForm: state.submitForm})
        }
        let returnItem = null, rules = {}
        item.type = item.type ? item.type.toLowerCase() : item.type
        if (item.required) {
            rules = {
                required: true,
                message: "请选择" + item.title,
                trigger: "change", //特意
            }
        }

        if (props.disabled) {
            item.disabled = props.disabled
        }

        if (item.customRender) {
            returnItem = item.customRender({submitForm: state.submitForm, item})
        }

        if ((!item.customRender && !returnItem) || returnItem === RERENDER) {
            switch (item.type) {
                case "select":
                    returnItem = _createSelect(item)
                    break
                case "tree-select":
                    returnItem = _createTreeSelect(item)
                    break
                case "remote":
                    returnItem = _createRemote(item)
                    break
                case "address":
                    returnItem = _createAddress(item)
                    if (item.required) {
                        rules.type = "array"
                    }
                    break
                case "cascader":
                    returnItem = _createCascade(item)
                    if (item.required) {
                        rules.type = "array"
                    }
                    break
                case "number":
                    returnItem = _createNumber(item)
                    if (item.required) {
                        rules = {
                            type: "number",
                            required: true,
                            message: "请填写" + item.title,
                            trigger: "blur",
                        }
                    }
                    break
                case "uploader":
                    returnItem = _createUploader(item)
                    if (item.required) {
                        if (item.defaultProps && item.defaultProps.maxNum && item.defaultProps.maxNum > 1) {
                            rules.type = "array"
                        } else {
                            rules = {
                                type: "object",
                                required: true,
                                message: "请选择" + item.title,
                                fields: {
                                    path: {type: "string", required: true, message: "请选择" + item.title},
                                },
                            }
                        }
                    }
                    break
                case "editor":
                    returnItem = _createRichEditor(item)
                    if (item.required) {
                        rules.message = "请填写" + item.title
                    }
                    break
                case "date":
                    returnItem = _createDate(item)
                    break
                case "time":
                    returnItem = _createTime(item)
                    break
                case "radio":
                    returnItem = _createRadioGroup(item)
                    break
                case "checkbox":
                    returnItem = _createCheckboxGroup(item)
                    if (item.required) {
                        rules.type = "array"
                    }
                    break
                case "switch":
                    returnItem = _createSwitch(item)
                    break
                case "tag":
                    returnItem = _createTag(item)
                    if (item.required) {
                        rules.type = "array"
                    }
                    break
                case "text":
                    returnItem = _createText(item)
                    break
                case "html":
                    returnItem = _createHtml(item)
                    break
                case "timeline":
                    returnItem = _createTimeline(item)
                    if (!item.title) {
                        labelWidth = {
                            labelCol: {span: 0},
                            wrapperCol: {span: 24},
                        }
                    }
                    if (!item.itemStyle) {
                        item.itemStyle = {marginBottom: 0}
                    }
                    break
                default:
                    returnItem = _createInput(item)
                    if (item.required) {
                        rules = {
                            required: true,
                            message: "请填写" + item.title,
                            trigger: "blur",
                        }
                    }
                    break
            }
        }


        let itemProps = {
            label: item.title,
            name: item.key,
        }
        if (item.formExtra) {
            itemProps["extra"] = item.formExtra
        }
        if (rules) {
            itemProps["rules"] = rules
        }

        //isHalf证明是双列，则覆盖labelWidth的属性
        if (isHalf) {
            labelWidth = getColumnCol(true)
        }
        if (!isUndefined(labelWidth)) {
            itemProps = Object.assign(itemProps, labelWidth)
        }
        if (!isUndefined(item.itemStyle)) {
            itemProps = Object.assign(itemProps, item.itemStyle)
        }

        return returnItem ? createElement(Form.Item, itemProps, {
            default() {
                return [returnItem, _createTips(item)]
            },
        }) : null
    }

    const _createTips = (item) => {
        return item.tips
            ? createElement(
                "div",
                {class: "tips"},
                {
                    default: () => isFunction(item.tips) ? item.tips() : item.tips
                }
            )
            : null
    }

    const _createInput = (item) => {
        if (
            state.submitForm[item.key] === null ||
            state.submitForm[item.key] === "null" ||
            state.submitForm[item.key] === undefined
        ) {
            state.submitForm[item.key] = ""
        }
        state.submitForm[item.key] = String(state.submitForm[item.key])
        let inputSlot = {}
        if (item.defaultProps) {
            if (item.defaultProps.prefix) {
                inputSlot.prefix = () => {
                    return item.defaultProps.prefix
                }
            }
            if (item.defaultProps.suffix) {
                inputSlot.suffix = () => {
                    return item.defaultProps.suffix
                }
            }
            if (item.defaultProps.prepend) {
                inputSlot.addonBefore = () => {
                    return item.defaultProps.prepend
                }
            }
            if (item.defaultProps.append) {
                inputSlot.addonAfter = () => {
                    return isFunction(item.defaultProps.append) ? item.defaultProps.append() : item.defaultProps.append
                }
            }
        }
        let defaultStyle = {width: item.width || "200px"}
        let name = Input
        if (item.type === "textarea" || (item.defaultProps && item.defaultProps.type === "textarea")) {
            name = Input.TextArea
            defaultStyle = {width: "100%", maxWidth: "500px"}
        }

        if (item.type === "password" || (item.defaultProps && item.defaultProps.type === "password")) {
            name = Input.Password
        }

        return createElement(
            name,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    disabled: !!item.disabled,
                    placeholder: item.placeholder || "请填写" + item.title,
                    style: item.style || defaultStyle,
                    class: item.class || "",
                    onInput(e) {
                        state.submitForm[item.key] = String(e.target.value)
                    },
                },
                item.defaultProps || {}
            ),
            inputSlot
        )
    }

    const _createTag = (item) => {
        let key = "commonTag_" + item.key + "_input"
        if (isUndefined(state.temporary[key])) {
            state.temporary[key] = ""
        }

        let tagElements =
            state.submitForm[item.key] &&
            state.submitForm[item.key].map((option) => {
                return createElement(
                    Tag,
                    {
                        closable: !item.disabled,
                    },
                    {
                        default() {
                            return option
                        },
                    }
                )
            })

        let inputElements = createElement(
            Input,
            {
                value: state.temporary[key],
                disabled: item.disabled,
                icon: "plus",
                placeholder: item.placeholder || "按Enter键确认",
                style: item.style || {width: "200px"},
                onInput(e) {
                    state.temporary[key] = String(e.target.value)
                },
                onPressEnter(e) {
                    if (e.keyCode === 13 && state.temporary[key]) {
                        state.submitForm[item.key].push(state.temporary[key])
                        state.temporary[key] = ""
                    }
                },
                onBlur() {
                    if (state.temporary[key]) {
                        state.submitForm[item.key].push(state.temporary[key])
                        state.temporary[key] = ""
                    }
                },
            },
            {
                prefix() {
                    return createElement(NewbieIcon, {
                        icon: "PlusOutlined",
                    })
                },
            }
        )
        if (item.disabled) {
            inputElements = ""
        }

        return createElement(
            "div",
            {},
            {
                default() {
                    return [tagElements, inputElements]
                },
            }
        )
    }

    const _createNumber = (item) => {
        state.submitForm[item.key] = Number(state.submitForm[item.key]) || 0
        return createElement(
            InputNumber,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    disabled: item.disabled,
                    placeholder: item.placeholder || "请填写" + item.title,
                    style: item.style || {width: "100px"},
                    onChange: function (val) {
                        state.submitForm[item.key] = val
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createSelect = (item) => {
        let options = getOptionsValue(item.options)
        options = options.map((op) => {
            return isString(op) ? {value: op, label: op} : op
        })
        let onEvent = Object.assign(
            {
                onChange(val) {
                    item.change && item.change(val)
                    state.submitForm[item.key] = val
                },
            },
            item.defaultEvent || {}
        )
        return createElement(
            Select,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key] || undefined,
                    options: options,
                    disabled: item.disabled,
                    allowClear: true,
                    placeholder: item.placeholder || "请选择" + item.title,
                    style: item.style || {width: "200px"},
                    class: item.class || "",
                },
                onEvent,
                item.defaultProps || {}
            )
        )
    }

    const _createTreeSelect = (item) => {
        let options = getOptionsValue(item.options)
        let onEvent = Object.assign(
            {
                onChange(val) {
                    item.change && item.change(val)
                    state.submitForm[item.key] = val
                },
            },
            item.defaultEvent || {}
        )
        return createElement(
            TreeSelect,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key] || undefined,
                    treeData: options,
                    disabled: item.disabled,
                    treeDefaultExpandAll: true,
                    treeNodeFilterProp: "label",
                    showSearch: true,
                    allowClear: true,
                    placeholder: item.placeholder || "请选择" + item.title,
                    style: item.style || {width: "200px"},
                    class: item.class || "",
                },
                onEvent,
                item.defaultProps || {}
            )
        )
    }

    const _createRemote = (item) => {
        let loadKey = "remote_" + item.key + "_load"
        let optionKey = "remote_" + item.key + "_options"
        let initKey = "remote_" + item.key + "_init"
        if (state.temporary[initKey] === undefined) {
            state.temporary[initKey] = true
            let options = []
            if (item.options) {
                options = getOptionsValue(item.options)
                options = options.map((op) => {
                    return isString(op) ? {value: op, label: op} : op
                })
            }
            state.temporary[optionKey] = options
        }
        if (state.temporary[optionKey] === undefined) {
            state.temporary[optionKey] = []
        }
        if (state.temporary[loadKey] === undefined) {
            state.temporary[loadKey] = {loading: false}
        }

        let onEvent = Object.assign(
            {
                onChange(val) {
                    item.change && item.change(val)
                    state.submitForm[item.key] = val
                },
                async onSearch(name) {
                    if (!name) {
                        return
                    }
                    let res = await useFetch(state.temporary[loadKey]).get(item.url, {params: {keyword: name}})
                    useProcessStatusSuccess(res, () => {
                        if (item.onSearch) {
                            res.result = item.onSearch(res.result)
                        }
                        state.temporary[optionKey] = res.result
                    })
                },
            },
            item.defaultEvent || {}
        )
        return createElement(
            Select,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key] || undefined,
                    options: state.temporary[optionKey],
                    disabled: item.disabled,
                    showSearch: true,
                    allowClear: true,
                    filterOption: false,
                    dropdownMatchSelectWidth: false,
                    placeholder: item.placeholder || "请选择" + item.title,
                    style: item.style || {width: "200px"},
                },
                onEvent,
                item.defaultProps || {}
            ),
            {
                notFoundContent() {
                    return state.temporary[loadKey].loading ? createElement(Spin) : ""
                },
            }
        )
    }

    const _createAddress = (item) => {
        return createElement(
            NewbieAddress,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    disabled: item.disabled,
                    placeholder: item.placeholder || "请选择" + item.title,
                    style: item.style || {width: "200px"},
                    "onUpdate:modelValue": (val) => {
                        state.submitForm[item.key] = val
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createCascade = (item) => {
        return createElement(
            Cascader,
            Object.assign(
                {
                    allowClear: true,
                    modelValue: state.submitForm[item.key],
                    options: getOptionsValue(item.options),
                    disabled: item.disabled,
                    changeOnSelect: true,
                    showSearch: {
                        filter(inputValue, path) {
                            return path.some((option) => {
                                return option.label && option.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1
                            })
                        },
                    },
                    placeholder: item.placeholder || "请选择" + item.title,
                    style: item.style || {width: "200px"},
                    class: item.class || "",
                    onChange: function (val) {
                        item.change && item.change(val)
                        state.submitForm[item.key] = val
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createUploader = (item) => createElement(
        NewbieUploader,
        Object.assign(
            {
                modelValue: state.submitForm[item.key],
                disabled: item.disabled,
                "onUpdate:modelValue": (val) => {
                    state.submitForm[item.key] = val
                },
            },
            item.defaultProps || {}
        )
    )

    const _createRichEditor = (item) => {
        let element = createElement(
            NewbieEditor,
            Object.assign(
                {
                    key: item.key,
                    modelValue: state.submitForm[item.key],
                    disabled: item.disabled,
                    style: item.style || {},
                    "onUpdate:modelValue": (val) => {
                        if (val !== state.submitForm[item.key]) {
                            state.submitForm[item.key] = val
                        }
                    },
                },
                item.defaultProps || {}
            )
        )
        //这个地方是个 Hack， 因为没有办法在组件内部获取到当前的组件实例，所以只能在这里缓存一下
        richEditors["richEditor_" + item.key] = element
        return element
    }

    const _createDate = (item) => {
        let dateName = DatePicker
        if (item.defaultProps && item.defaultProps.type === "range") {
            dateName = RangePicker
        }

        return createElement(
            dateName,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    allowClear: true,
                    disabled: item.disabled,
                    style: item.style || {width: "200px"},
                    class: item.class || "",
                    onChange: function (val) {
                        item.change && item.change(val)
                        state.submitForm[item.key] = val
                    },
                    onOpenChange: function (val) {
                        item.openChange && item.openChange(val)
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createTime = (item) => {
        let dateName = TimePicker
        if (item.defaultProps) {
            if (item.defaultProps.type === "range") {
                dateName = TimeRangePicker
            }
        }
        return createElement(
            dateName,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    allowClear: true,
                    disabled: item.disabled,
                    style: item.style || {},
                    onChange: function (val) {
                        item.change && item.change(val)
                        state.submitForm[item.key] = val
                    },
                    onOpenChange: function (val) {
                        item.openChange && item.openChange(val)
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createSwitch = (item) => {
        let optionElements = {}
        if (item.options && item.options.length) {
            if (item.options[0]) {
                optionElements.checkedChildren = () => {
                    return item.options[0]
                }
            }
            if (item.options[1]) {
                optionElements.unCheckedChildren = () => {
                    return item.options[1]
                }
            }
        }
        return createElement(
            Switch,
            Object.assign(
                {
                    checked: state.submitForm[item.key],
                    disabled: item.disabled,
                    style: item.style || {},
                    onChange: function (val) {
                        state.submitForm[item.key] = val
                    },
                },
                item.defaultProps || {}
            ),
            optionElements
        )
    }

    const _createRadioGroup = (item) => {
        let options = getOptionsValue(item.options)
        options = options.map((op) => {
            return isString(op) ? {value: op, label: op} : op
        })
        return createElement(
            RadioGroup,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    optionType: "button",
                    buttonStyle: "solid",
                    disabled: item.disabled,
                    options: options,
                    style: item.style || {},
                    onChange: function (e) {
                        let val = e.target.value
                        state.submitForm[item.key] = val
                        item.change && item.change(val)
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createCheckboxGroup = (item) => {
        let options = getOptionsValue(item.options)
        options = options.map((op) => {
            return isString(op) ? {value: op, label: op} : op
        })
        return createElement(
            CheckboxGroup,
            Object.assign(
                {
                    modelValue: state.submitForm[item.key],
                    disabled: item.disabled,
                    options: options,
                    style: item.style || {},
                    onChange: function (val) {
                        state.submitForm[item.key] = val
                        item.change && item.change(val)
                    },
                },
                item.defaultProps || {}
            )
        )
    }

    const _createText = (item) => {
        let value = item.defaultValue ? item.defaultValue(state.submitForm) : state.submitForm[item.key]
        let returnText = ""
        if (value) {
            if (isArray(value)) {
                returnText = []
                value.forEach((it) => {
                    returnText.push(
                        createElement(Tag, item.defaultProps || {}, {
                            default() {
                                return it
                            },
                        })
                    )
                })
            } else {
                returnText = createElement(Tag, item.defaultProps || {}, {
                    default() {
                        return value
                    },
                })
            }
        }

        return returnText
    }

    const _createHtml = (item) => {
        let value = (item.defaultValue && item.defaultValue(state.submitForm)) || state.submitForm[item.key],
            returnText = ""
        if (value) {
            returnText = createElement(
                "div",
                Object.assign(
                    {
                        style: item.style || {},
                        innerHTML: value,
                    },
                    item.defaultProps || {}
                )
            )
        }

        return returnText
    }

    const _createTimeline = (item) => {
        let returnText = ""
        if (item.children) {
            let arr = []
            item.children.forEach((child) => {
                let html = []
                if (!isArray(child)) {
                    child = [child]
                }
                child.forEach((ch) => {
                    let value = (ch.value && ch.value(state.submitForm)) || state.submitForm[ch.key] || ""
                    ch.type = ch.type.toLowerCase()
                    if (ch.type === "tag") {
                        value &&
                        html.push(
                            createElement(Tag, ch.defaultProps || {}, {
                                default() {
                                    return value
                                },
                            })
                        )
                    } else {
                        let content = createElement(
                            "div",
                            Object.assign(
                                {
                                    style: {
                                        maxHeight: "38px",
                                        lineHeight: "18px",
                                        marginBottom: "5px",
                                        overflow: "hidden",
                                        textOverflow: "ellipsis",
                                        display: "-webkit-box",
                                        "-webkit-box-orient": "vertical",
                                        "-webkit-line-clamp": 2,
                                    },
                                },
                                item.defaultProps || {}
                            ),
                            {
                                default() {
                                    return [
                                        ch.title
                                            ? createElement("b", {
                                                style: {
                                                    marginRight: "5px",
                                                },
                                                innerHTML: ch.title,
                                            })
                                            : "",
                                        createElement("span", {
                                            innerHTML: value,
                                        }),
                                    ]
                                },
                            }
                        )
                        if ((ch.title + value).length > 32) {
                            const contentTip = createElement(
                                Tooltip,
                                {
                                    title: value,
                                },
                                {
                                    default() {
                                        return content
                                    },
                                }
                            )
                            html.push(contentTip)
                        } else {
                            html.push(content)
                        }
                    }
                })
                arr.push(
                    createElement(
                        Timeline.Item,
                        {},
                        {
                            default() {
                                return html
                            },
                        }
                    )
                )
            })
            returnText = createElement(Timeline, item.defaultProps || {}, {
                default() {
                    return arr
                },
            })
        }
        return returnText
    }

    const _createSubmitButton = (labelWidth) => {
        let closeButton = ""
        if (isFunction(props.onClose)) {
            closeButton = createElement(
                Button, {
                    style: {
                        marginLeft: props.reverseButton ? "0px" : "10px"
                    },
                    onClick: function () {
                        props.onClose()
                    },
                },
                {
                    default() {
                        return props.closeButtonText || "关闭"
                    },
                }
            )
        }
        let submitButton = ""
        let submitText = props.submitButtonText || "保存"
        if (!props.submitDisabled && !props.disabled) {
            submitButton = createElement(
                Button,
                {
                    loading: state.buttonLoading.loading,
                    htmlType: "submit",
                    type: "primary",
                    style: {
                        marginLeft: props.reverseButton ? "10px" : "0"
                    },
                    onClick() {
                        if (props.submitConfirmText) {
                            useModalConfirm(props.submitConfirmText, () => {
                                setTimeout(() => {
                                    submit()
                                }, 200)
                            })
                        } else {
                            submit()
                        }
                    },
                },
                {
                    default() {
                        return state.buttonLoading.loading ? submitText + "中..." : submitText
                    },
                }
            )
        }

        let colType = props.column === "two" ? "Part" : "Full"
        let buttonProps = {
            wrapperCol: formLabel["commonWrapper" + colType + "Offset"],
            class: "mg-0 divider-line pt-2",
        }
        if (labelWidth !== undefined) {
            buttonProps = Object.assign(buttonProps, labelWidth)
        }
        return createElement(Form.Item, buttonProps, {
            default() {
                return props.reverseButton ? [closeButton, submitButton] : [submitButton, closeButton]
            },
        })
    }

    let colItems = [],
        form = formData.value,
        columnType = props.column,
        fixedItems = [],
        layoutType = props.layout
    let labelColZero = {labelCol: {span: 0}, wrapperCol: {span: 24}},
        rowCol = []

    //isInitForm为true才渲染组件
    if (state.isInitForm) {
        //生成界面排列数据
        form.forEach(function (item) {
            if (!isUndefined(item.divider)) {
                colItems.push({
                    divider: true,
                    dividerTitle: item.divider === true ? "" : item.divider,
                })
            }
            //双列并且有左右分隔
            if (
                columnType === "two" &&
                item.position &&
                (item.position.indexOf("left") > -1 || item.position.indexOf("right") > -1)
            ) {
                if (colItems.length === 0 || isUndefined(colItems[colItems.length - 1].left)) {
                    colItems.push({
                        left: [],
                        right: [],
                    })
                }
                if (item.position.indexOf("left") > -1) {
                    let renderItem = _createFormItem(item, false, true)
                    if (renderItem) {
                        colItems[colItems.length - 1].left.push(renderItem)
                    }

                } else if (item.position.indexOf("right") > -1) {
                    let renderItem = _createFormItem(item, false, true)
                    if (renderItem) {
                        colItems[colItems.length - 1].right.push(renderItem)
                    }
                }
            } else if (layoutType === "fixed" && item.position && item.position.indexOf("fixed") > -1) {
                //固定栏
                let renderItem = _createFormItem(item, labelColZero)
                if (renderItem) {
                    fixedItems.push(renderItem)
                }
            } else {
                //单列，允许双列模式中的单列
                if (colItems.length === 0 || !isArray(colItems[colItems.length - 1])) {
                    colItems.push([])
                }

                let renderItem = _createFormItem(item);
                if (renderItem) {
                    colItems[colItems.length - 1].push(renderItem)
                }
            }
        })

        //生成操作按钮
        if (layoutType === "fixed") {
            fixedItems.push([_createSubmitButton(labelColZero)])
        } else {
            colItems.push([createElement(Divider), _createSubmitButton()])
        }
        let rows = []
        if (props.column === "one") {
            //单列
            colItems.forEach((item) => {
                if (item.divider === true) {
                    rows.push(
                        createElement(
                            Divider,
                            {orientation: "left"},
                            {
                                default() {
                                    return item.dividerTitle || ""
                                },
                            }
                        )
                    )
                    return false
                }
                rows.push(
                    createElement(
                        Row,
                        {},
                        {
                            default() {
                                return createElement(
                                    Col,
                                    {
                                        span: 24,
                                        xl: props.fullWidth ? 24 : {span: 20, offset: 2},
                                        xxl: props.fullWidth ? 24 : {span: 18, offset: 3},
                                    },
                                    {
                                        default() {
                                            return item
                                        },
                                    }
                                )
                            },
                        }
                    )
                )
            })
        } else if (props.column === "two") {
            //双列
            let widthArr = props.columnWidth.split(",")
            colItems.forEach((item) => {
                if (item.divider === true) {
                    rows.push(
                        createElement(
                            Divider,
                            {orientation: "left"},
                            {
                                default() {
                                    return item.dividerTitle || ""
                                },
                            }
                        )
                    )
                    return false
                }

                if (isUndefined(item.left)) {
                    rows.push(item)
                } else {
                    rows.push(
                        createElement(
                            Row,
                            {},
                            {
                                default() {
                                    return [
                                        createElement(
                                            Col,
                                            {span: widthArr[0] || 12},
                                            {
                                                default() {
                                                    return item.left || ""
                                                },
                                            }
                                        ),
                                        createElement(
                                            Col,
                                            {span: widthArr[1] || 12},
                                            {
                                                default() {
                                                    return item.right || ""
                                                },
                                            }
                                        ),
                                    ]
                                },
                            }
                        )
                    )
                }
            })
        }

        rowCol = rows
        if (layoutType === "fixed") {
            rowCol = createElement(
                Row,
                {},
                {
                    default() {
                        return [
                            createElement(
                                Col,
                                {
                                    span: 18,
                                },
                                {
                                    default() {
                                        return rows
                                    },
                                }
                            ),
                            createElement(
                                Col,
                                {
                                    span: 6,
                                },
                                {
                                    default() {
                                        return createElement(
                                            Card,
                                            {style: {marginLeft: '20px'}},
                                            {
                                                default() {
                                                    return fixedItems
                                                },
                                            }
                                        )
                                    },
                                }
                            ),
                        ]
                    },
                }
            )
        }
    }

    let cardSlot = {}
    if (slots.extra) {
        cardSlot["extra"] = () => {
            return slots.extra
        }
    }
    if (slots.title) {
        cardSlot["title"] = () => {
            return slots.title
        }
    }

    let childrenWrapper = []

    childrenWrapper.push(
        createElement(
            Skeleton,
            {
                loading: state.isInit,
                active: true,
                paragraph: {
                    rows: 10,
                },
            },
            {
                default() {
                    let rd = []
                    slots.prepend && rd.push(slots.prepend())
                    rd.push(rowCol)
                    return rd
                },
            }
        )
    )

    let formProps = Object.assign(getColumnCol(), props.formConfig)
    formProps["model"] = state.submitForm
    formProps["class"] = "newbie-edit-wrapper"
    formProps["labelWrap"] = true
    return createElement(Form, formProps, {
        default() {
            return props.cardWrapper
                ? createElement(
                    Card,
                    {
                        size: props.size,
                        title: state.title || "",
                    },
                    Object.assign(
                        {
                            default() {
                                return childrenWrapper
                            },
                        },
                        cardSlot
                    )
                )
                : childrenWrapper
        },
    })
}


doInit()


/****************** exposes ******************/
const getForm = () => cloneDeep(state.submitForm)

const getSubmitForm = () => state.submitForm

const setForm = (fields) => {
    Object.keys(fields).forEach((key) => {
        state.submitForm[key] = fields[key]
    })
}

const reset = () => {
    editor.value.resetFields()
}


defineExpose({getForm, getSubmitForm, setForm, reset})

</script>

<style lang="less">
.newbie-edit-wrapper {
    padding-right: 20px;

    .ant-divider {
        font-weight: bold;
    }

    .newbie-edit-extra-close {
        i {
            font-size: 25px;
            line-height: 1;
        }
    }

    .ant-timeline-item-last {
        padding-bottom: 0;
    }

    :deep(.ant-form-item-control-input) {
        .tips {
            color: #9ca3af;
            margin-top: 4px;
            font-size: 13px;
            white-space: break-spaces;
        }
    }
}
</style>
